global without sharing class b2b_extn_ctrl_emailCart {

    public ccrz__E_Cart__c cart {get;set;}
    public List<ccrz__E_CartItem__c> cartItems {get;set;}
    public String cartId {get; 
        set {
            cartId = value;
            getData();
        }
    }

    //get Cart 
    public void getData() {
        if(cartId != null){
            cart = [SELECT Id, Name, ccrz__TotalAmount__c, ccrz__SubtotalAmount__c, ccrz__TotalQuantity__c, ccrz__BuyerFirstName__c
                    FROM ccrz__E_Cart__c
                    WHERE Id =: cartId];
            cartItems = [SELECT Id, ccrz__Quantity__c, ccrz__OriginalItemPrice__c, ccrz__Price__c, ccrz__Product__r.Name, ccrz__Product__r.ccrz__SKU__c
                    FROM ccrz__E_CartItem__c
                    WHERE ccrz__Cart__c =: cartId];
        }
    }

    //action from Cart page
    @RemoteAction
    global static ccrz.cc_RemoteActionResult sendCartEmail(ccrz.cc_RemoteActionContext ctx, String emailBeanJSON) {
        ccrz.ccLog.log(System.LoggingLevel.DEBUG, 'M:E', 'b2b_extn_ctrl_emailCart:sendCartEmail');
        ccrz.cc_RemoteActionResult res = ccrz.cc_CallContext.init(ctx);
        res.success = false;
        try {
            String cartEncId = ccrz.cc_CallContext.currCartId;
            Map<String, Object> emailBeanMap = (Map<String, Object>) JSON.deserializeUntyped(emailBeanJSON);

            res.data = cartEncId;
            res.success = createAndSendCartEmail(emailBeanMap, cartEncId);

        } catch (Exception e) {
            ccrz.ccLog.log(System.LoggingLevel.ERROR, 'ERR', e);
        } finally {
            ccrz.ccLog.close(res);
        }

        ccrz.ccLog.log(System.LoggingLevel.DEBUG, 'M:X', 'b2b_extn_ctrl_emailCart:sendCartEmail');
        return res;
    }

    //private helper methods
    private static Boolean createAndSendCartEmail(Map<String,Object> emailBeanMap, String cartEncId) {
        Boolean wasSuccess = false;

        //get cart SFID
        ccrz__E_Cart__c currCart = [SELECT Id FROM ccrz__E_Cart__c WHERE ccrz__EncryptedId__c =: cartEncId];

        //get EmailTemplateId
        EmailTemplate emailTemplate = [SELECT Id FROM EmailTemplate WHERE DeveloperName = 'CC_Cart_Email'];

        //create email 2.0
        Messaging.SingleEmailMessage message = 
            Messaging.renderStoredEmailTemplate(emailTemplate.Id, null, currCart.Id);

        //create email
        message.setReplyTo('no-reply@fluidigm.com');
        message.setUseSignature(false);
        message.setSaveAsActivity(false);
        message.setBccSender(false);

        //set Subject
        String emailSubject = (String) emailBeanMap.get('subject');
        if(emailSubject != null) {
            message.subject = emailSubject;
        } else {
            //if blank, will default to the Subject defined in the EmailTemplate ('Your Fluidigm Cart')
        }

        //set toAddress
        String toEmailAddress = (String) emailBeanMap.get('toEmailAddress');
        message.toAddresses = new String[] { toEmailAddress };

        //set ccAddress
        String ccEmailAddress = (String) emailBeanMap.get('ccEmailAddress');
        message.ccAddresses = new String[] { ccEmailAddress };

        //construct + send email
        Messaging.SingleEmailMessage[] messages = new List<Messaging.SingleEmailMessage> {message};
        Messaging.SendEmailResult[] results = Messaging.sendEmail(messages);
        
        if (results[0].success) {
            wasSuccess = true;
        } else {
            System.debug('The email failed to send: ' +  results[0].errors[0].message);
        }

        return wasSuccess;
    }

}